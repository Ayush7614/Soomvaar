# -*- coding: utf-8 -*-
"""plantdiseasedetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pfXwpcH6FviLWMxMQNGy5hyj6sIqh2sC
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install flask-ngrok

from flask_ngrok import run_with_ngrok
from flask import Flask
from flask import Flask, request, jsonify
import base64

# Commented out IPython magic to ensure Python compatibility.
try:
  # Use the %tensorflow_version magic if in colab.
#   %tensorflow_version 2.x
except Exception:
  pass

import tensorflow as tf

from keras.preprocessing.image import ImageDataGenerator

from keras import backend as K
from keras import regularizers
from keras.models import Sequential
from keras.models import Model
from keras.layers import Dense
from keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop
from keras.utils import to_categorical
from keras.callbacks import ReduceLROnPlateau

import tensorflow_hub as hub

from keras.layers import Dropout, Flatten,Activation
from keras.layers import Conv2D, MaxPooling2D, BatchNormalization
from keras.layers import InputLayer
from keras import backend as K
from tensorflow.python.tools import freeze_graph
from tensorflow.python.tools import optimize_for_inference_lib
import random as rn
import pathlib

from __future__ import absolute_import, division, print_function, unicode_literals #l

from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import LabelEncoder

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import warnings
warnings.filterwarnings('always')
warnings.filterwarnings('ignore')

import cv2                  
import numpy as np  
from tqdm import tqdm
import os                   
from random import shuffle  
from zipfile import ZipFile
from PIL import Image
import keras.preprocessing.image as img
from keras.applications.resnet50 import ResNet50

for dirname, _, filenames in os.walk('/content/drive/My Drive/Dataset/Grape'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

def make_train_data(label,DIR):
    s=0
    for img in tqdm(os.listdir(DIR)):
          if(s<=400):
              path = os.path.join(DIR,img)
              img = cv2.imread(path,cv2.IMREAD_COLOR)
              img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))
              X.append(np.array(img))
              Z.append(str(label))
              s+=1
          else:
              break

X=[]
Z=[]
IMG_SIZE=256
Grape___Esca='/content/drive/My Drive/Dataset/Grape/Grape___Esca'
Grape___Black_rot='/content/drive/My Drive/Dataset/Grape/Grape___Black_rot'
Grape___healthy='/content/drive/My Drive/Dataset/Grape/Grape___healthy'

#Grape___Leaf_blight_(Isariopsis_Leaf_Spot)
make_train_data('Grape___Esca',Grape___Esca)
make_train_data('Grape___Black_rot',Grape___Black_rot)
make_train_data('Grape___healthy',Grape___healthy)

le=LabelEncoder()
Y=le.fit_transform(Z)
Y=to_categorical(Y,3)
print(Y)
X=np.array(X)

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=1337)

np.random.seed(42)
rn.seed(42)

base_model=tf.keras.applications.ResNet50(include_top=False, weights='imagenet',input_shape=(256,256,3), pooling='max')
base_model.trainable=True
base_model.summary()
print("hello")

def create_model():
  model=tf.keras.models.Sequential()
  model.add(base_model)
  model.add(tf.keras.layers.Dropout(0.20))
  model.add(tf.keras.layers.Dense(2048,activation='relu'))
  model.add(tf.keras.layers.Dense(1024,activation='relu'))
  model.add(tf.keras.layers.Dense(512,activation='relu'))
  model.add(tf.keras.layers.Dense(3,activation='softmax' ,name='output'))
  model.build()
  #model.summary()

  epochs=50
  batch_size=128
  red_lr=ReduceLROnPlateau(monitor='val_acc', factor=0.1, min_delta=0.0001, patience=2, verbose=1)
  base_model.trainable=True # setting the VGG model to be trainable.
  opt = tf.keras.optimizers.Adam(lr=1e-5, decay=1e-6)
  model.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])
  return model

model=create_model()
model.summary()

History = model.fit(x_train, y_train, epochs=20, validation_data=(x_test,y_test)) #epoch does the weight calculation

path = "/content/drive/My Drive/Dataset/Grape/test"
files = os.listdir(path)
files
print(len(files))

def predict():
    for i in tqdm(files):
        pth = os.path.join(path,i)
        X = cv2.imread(pth,cv2.IMREAD_COLOR)
        X = cv2.resize(X,(256,256))
        plt.figure()
        plt.imshow(X[:,:,::-1]) 
        plt.show()  
        X = np.array(X)
        X = np.expand_dims(X, axis=0)
        dummy=model.predict(X)
        print(dummy)

        y_pred = np.round(dummy)
        if y_pred[0][2] == 1:
            print("healthy")
        elif y_pred[0][1]==1:
            print("esca")
        else:
            print("black")
        #print(y_pred)

predict()
